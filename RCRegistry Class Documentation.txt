/*-----------------------------------------------------------------------------------------------------
/	Name         : (RCRegistry) Ring Class for (Ring_WinCReg) Extension
/	Purpose      : This Class simplify using (Ring_WinCReg) extension
/                                         It imitates the way of using original CRegistry Class in C++
/
/	Author Name  : Majdi Sobain
/	Author Email : MajdiSobain@Gmail.com
/
/					Copyright (c) 2016
/-----------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------*/
/*																									  */
                                RCRegistry Class in Ring (WinCReg.ring)
                        WINDOWS CREGISTRY CLASS EXTENSION FOR RING DOCUMENTATION                    
/*																									  */
/*----------------------------------------------------------------------------------------------------*/



/*---------------------------------*/
/*        Dealing with Keys        */
/*---------------------------------*/

If KeyExists(HKEY_CURRENT_USER, "Software) = True
	See "Software keys is present in HKEY_CURRENT_USER"
Ok

Registry =  new RCRegistry {

			/* This function is used to Open a registry key with the ability of passing parameters as a list ( allowed parameters 2-3 )
			The parameters are :
			1- The root key.
			2- The sub key that we want to open
			3- Flags that control how we want to use this library functions
				These Flags are as follow:
					1- CREG_READONLY : for just open the key. This flag cannot be used with others in the same time.
					2- CREG_CREATE : this flag will make the function to create the key if its not exist.
							( This Flag is Used by default when calling OpenKey function )
					3- CREG_AUTOOPEN : activate the autoopen mechanism of CRegistry Class.
					4- CREG_LOADING
			4- The option to access Wow64 tree.
			*/
			OpenKey([HKEY_CURRENT_USER,"Software\Microsoft", CREG_READONLY, True])

			// This function accepts the first two parameters
			OpenKey2(HKEY_CURRENT_USER, "Software\Microsoft")

			// This function accepts the first three parameters
			OpenKey3(HKEY_CURRENT_USER, "Software\Microsoft", CREG_CREATE | CREG_AUTOOPEN )	# This example show how could we use more than one flag.

			// This function accepts all the four parameters
			OpenKey4(HKEY_CURRENT_USER, "Software\Microsoft", CREG_READONLY, True)

			// This function will set the flags even after opening a key
			SetFlags(CREG_CREATE | CREG_AUTOOPEN)

			// This function will return the flags ( will return the summation of all flags as a number )
			Flags = GetFlags()

			// This function redirects the key to access 64 bit tree ( Wow64 )
			Access64Tree(True)

			// This function checks whether the opened key is virtualized or not
			If IsVirtualized()
				See "the Opened key is virtualized"
			Ok

			// This function checks virtualization too but with detailed output ( 1 virtualized, 0 not virtualized, -1 uncertain)
			If IsVirtualized2() = 1
				See "the Opened key is virtualized"
			But IsVirtualized2() = -1
				See "the Opened key can not be clearly known as virtualized"
			Else
				See "the Opened key is not virtualized"
			Ok

			// This function returns the number of entries within this opened key
			// EntryCount()
			EntCount = EntryCount()

			// This function checks whether the given subkey is present within the current opened key ("software") or not
			// SubKeyExists("subkey") 
			If SubKeyExists("microsoft") = True
				See "'Microsoft' subkey in 'Software' in 'HKEY_CURRENT_USER' is existed"
			Ok

			// This function will return the total number of subkeys of the opened key
			// SubKeysCount()
			TotalSubkeys = SubKeysCount()
			
			// This function return a subkey of a specific index
			// GetSubKeyAt(index)
			SecondSubkey = GetSubKeyAt(2)
			
			// This function return a list of all subkeys of the currently opened key
			// GetSubKeys()
			aList = GetSubKeys()
			
			// This function refresh the internal mechanism of CRegistry class for the current used object( I have never used it before )
			Refresh()

			// This function returns a handler of the entry that is present in a particular index
			// this can be used in the time of iteration of entries within the opened key
			// GetEntryAt(index)
			FirstEntry = GetEntryAt(1)

			// This function returns a name of the give entry handler ( accepts entry handler only )
			// GetEntryName(entryHandler)
			e = GetEntryAt(1)
			GetEntryName(e)

			// This function returns a list of all entries names that present in the current open key 
			// GetEntries()
			aList = GetEntries()

			// This function copies all entries of the current opened key into the given key
			// CopyAllTo(keyHandler)
			Reg = new CRegistry { OpenKey2(HKEY_CURRENT_USER, "Software\Microsoft") }
			CopyAllTo(Reg.Key)
			Reg.CloseKey()

			// This function closes the current opened key
			CloseKey()

			// This function delete the currently opened key
			DeleteKey()

			}
			
			
			
/*-----------------------------------------------*/
/*        Dealing with entries and values        */
/*-----------------------------------------------*/


// To create or set a value in an entry named "nEntry" you just need to do this simple thing
// This function deals with ring values as follow:
// 		if the value is a numerical value it checks whether it is not floated and its in the range of DWORD 
//				so that it is saved as (REG_DWORD)
//		OR if the value is a string or floated number so its saved as string value (REG_SZ)
// Note: 5.0000 is considered as not floated value as there's no real value after the point
Registry["nEntry"].Set("500 S.R.")

// To get a value of an entry named "nEntry" from the same opened key
// This function will return "just" a REG_DWORD as numerical value and REG_SZ 
// or REG_EXPAND_SZ (expanded form) as string
v = Registry["nEntry"].Get()
See v

// To check whether the entry named "nEntry" is present within this opened key
If Registry["nEntry"].Exists() = true 
	See "nEntry Value is present"
Ok

// To rename an entry named "nEntry" with new name such as "newnEntry"
Registry["nEntry"].Rename("newnEntry")

// To copy an entry named "nEntry" form the current opened key into another one 
Reg = new CRegistry { OpenKey2(HKEY_CURRENT_USER, "Software\Microsoft\Windows") }
Registry["nEntry"].CopyTo(Reg.Key)
Reg.CloseKey()

// To delete an entry named "nEntry" 
Registry["nEntry"].Delete()

// To create and set a value in an entry of MultiString with name "nEntry"
// ( This function could write over already exist data so please be careful when using it)
// ( Its better to set MultiString values using MultiAdd() function )
Registry["nEntry"].SetMulti("This is the first line of the multistring")

// To add or set a value to a MulitString entry named "nEntry"
Registry["nEntry"].MultiAdd("New Value")

// To set or reset the value of specific index (1) within an entry of MultiString named "nEntry"
Registry["nEntry"].MultiSetAt(1 /*index*/ , "New value")

// To get a value of specific index (1) in an entry of MultiString named "nEntry"
v = Registry["nEntry"].MultiGetAt(1)

// To remove a value of a specific index (1) in an entry of MultiString named "nEntry"
Registry["nEntry"].MultiRemoveAt(1)

// To return the number of all values present in an entry of MultiString named "nEntry"
c = Registry["nEntry"].MutliCount()

// To clear all the values of a MultiString entry named "nEntry"
Registry["nEntry"].MultiClear()

// To set a MultiString entry named "nEntry" with a list of values 
aList = ["one", "two", "three", "four"]
Registry["nEntry"].SetMultiList(aList)

// To get all values of a MultiString entry named "nEntry" into a List 
aList = Registry["nEntry"].GetMultiList()

// To get a value of REG_EXPAND_SZ named "nEntry"
v = Registry["nEntry"].GetExpandSZ()

// To set a value of REG_EXPAND_SZ named "nEntry"
Registry["nEntry"].SetExpandSZ("Expandable value")

// To get a value of REG_QWORD named "nEntry"
// returned value could be number if it is the ring limit of numbers or 
// string if it is large
v = Registry["nEntry"].GetQWORD()

// To get a string value of any REG_QWORD entry use this function
v = Registry["nEntry"].GetQWORDs()

// To set a value of REG_QWORD named "nEntry"
// the value could be number or string
Registry["nEntry"].SetQWORD( value )

// To check the type of an entry named "nEntry"
If Registry["nEntry"].IsString() = True 
	See "Its a string"
Ok
If Registry["nEntry"].IsDWORD() = True 
	See "Its a DWORD"
Ok
If Registry["nEntry"].IsMultiString() = True 
	See "Its a multistring"
Ok
If Registry["nEntry"].IsBinary() = True 
	See "Its a binary"
Ok
If Registry["nEntry"].IsExpandSZ() = True 
	See "Its an Expandable SZ"
Ok

// To get the type index of an entry
TypeIndex = Registry["nEntry"].TypeIndex()

// To get the type name as string
TypeName = Registry["nEntry"].Type()
